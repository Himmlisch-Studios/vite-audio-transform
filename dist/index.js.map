{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { dataToEsm } from '@rollup/pluginutils'\nimport { basename, extname } from \"node:path\";\nimport { readFile, rm } from \"node:fs/promises\";\nimport type { Plugin, ResolvedConfig } from \"vite\" with { 'resolution-mode': 'import' };\nimport ffmpeg from \"fluent-ffmpeg\";\n\nconst fileRegex = /\\.(ogg|mp3|flac|m4a|wav)$/\n\nfunction convertAudio(origin: string, target: string, flags: string[] = []): Promise<void> {\n    return new Promise((resolve, reject) => {\n        ffmpeg(origin)\n            .addOptions(flags)\n            .output(target)\n            .on('error', (e) => reject(e))\n            .on('end', () => resolve())\n            .run();\n\n    });\n}\n\nexport declare type AudioTransformType = 'ogg' | 'mp3' | 'flac' | 'webm' | 'm4a' | 'wav';\n\nexport declare type AudioTransformOpts = {\n    type: AudioTransformType,\n    quality: number | undefined\n}\n\nexport default function viteAudioTransform({\n    type = 'ogg',\n    quality = undefined\n} = {} as AudioTransformOpts): Plugin {\n    const optionsByFormat = {\n        ogg: {\n            'q:a': quality ?? 5 // -1 to 10,\n        },\n        mp3: {\n            'q:a': quality ?? 5 // 0 to 9,\n        },\n        flac: {\n            'compression_level': quality ?? 0. // 0 to 12\n        },\n        webm: {\n            'b:a': (quality ?? 96) + 'k'\n        },\n        m4a: {\n            vbr: quality ?? 3,\n        },\n        wav: {}\n    } as { [key in AudioTransformType]: { [key: string]: number | string | undefined } };\n\n    const typeOpts = optionsByFormat[type];\n\n    if (typeOpts === undefined) {\n        throw new Error(\"Not supported audio conversion type\")\n    }\n\n    // const config = {\n\n    // };\n\n    const conversionConfig = {\n        ...typeOpts\n    };\n\n    const conversionFlags: string[] = [];\n\n    for (const flag in conversionConfig) {\n        const value = conversionConfig[flag];\n        if (value !== undefined || value !== null) {\n            conversionFlags.push(`-${flag} ${value}`);\n        }\n    }\n\n    const tempFiles = new Set<string>;\n\n    const transformAudioFile = async (filePath: string) => {\n        const tempPath = filePath.replace(fileRegex, `_$temp.${type}`);\n\n        await convertAudio(filePath, tempPath, conversionFlags);\n\n        const buffer = await readFile(tempPath);\n\n        tempFiles.add(tempPath);\n\n        return buffer;\n\n    }\n\n    let viteConfig: ResolvedConfig;\n\n    let assetsInlineLimit: (filePath: string, content: Buffer) => boolean | undefined;\n\n    return {\n        name: 'vite-audio-transform',\n        enforce: 'pre',\n        configResolved(cfg: ResolvedConfig) {\n            viteConfig = cfg;\n\n            assetsInlineLimit = typeof viteConfig.build.assetsInlineLimit === 'function'\n                ? viteConfig.build.assetsInlineLimit\n                : (_, buffer) => buffer.byteLength <= (viteConfig.build.assetsInlineLimit as number);\n\n        },\n        async load(filePath: string) {\n            if (viteConfig.command !== 'build') return;\n            if (!fileRegex.test(filePath)) return;\n\n\n            const audio = await transformAudioFile(filePath);\n\n            if (assetsInlineLimit(filePath, audio)) {\n                return `export default \"data:audio/${type};base64,${audio.toString('base64')}\";`;\n            }\n\n            const fileHandle = this.emitFile({\n                name: basename(filePath, extname(filePath)) + `.${type}`,\n                source: audio,\n                type: 'asset'\n            })\n\n            return dataToEsm(`__VITE_ASSET__${fileHandle}__`, {\n                namedExports: viteConfig.json?.namedExports ?? true,\n                compact: !!viteConfig.build.minify,\n                preferConst: true,\n                objectShorthand: true\n            })\n        },\n        async buildEnd() {\n            const promises: Array<Promise<void>> = [];\n            for (const filepath of tempFiles) {\n                promises.push(\n                    rm(filepath).catch((e) => console.warn(`Unable to clear temp audio file ${filepath}.\\n${e}`))\n                );\n            }\n\n            await Promise.all(promises);\n        }\n\n    }\n}"],"names":[],"mappings":"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"}